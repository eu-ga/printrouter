// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import model "github.com/rockspoon/rs.cor.printer-ms/model"

// PrintService is an autogenerated mock type for the PrintService type
type PrintService struct {
	mock.Mock
}

// KitchenReceipt provides a mock function with given fields: ctx, request
func (_m *PrintService) KitchenReceipt(ctx context.Context, request model.KitchenReceipt) (*model.Payload, error) {
	ret := _m.Called(ctx, request)

	var r0 *model.Payload
	if rf, ok := ret.Get(0).(func(context.Context, model.KitchenReceipt) *model.Payload); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Payload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.KitchenReceipt) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentReceipt provides a mock function with given fields: ctx, request
func (_m *PrintService) PaymentReceipt(ctx context.Context, request model.PaymentReceipt) (*model.Payload, error) {
	ret := _m.Called(ctx, request)

	var r0 *model.Payload
	if rf, ok := ret.Get(0).(func(context.Context, model.PaymentReceipt) *model.Payload); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Payload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.PaymentReceipt) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TableBill provides a mock function with given fields: ctx, request
func (_m *PrintService) TableBill(ctx context.Context, request model.Bill) (*model.Payload, error) {
	ret := _m.Called(ctx, request)

	var r0 *model.Payload
	if rf, ok := ret.Get(0).(func(context.Context, model.Bill) *model.Payload); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Payload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Bill) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
